#coding=utf-8
import collections

LINE100 = 'line100'

REDIS_PORT = 9391
REDIS_PASSWORD = 'Ztgame#321'

ENVS = collections.OrderedDict([
    ('dev',   {'desc': 'dev', 'redirection': 'idcnet',   'pcl': {'ip': '9.140.184.182',  'port': 12345}, 'redis': {'ip': '9.140.184.182',    'port': REDIS_PORT,  'passwd': REDIS_PASSWORD}, 'zk': {'hosts': '100.117.68.137:2181', 'root': '/ZK_LINE100_DB'}}),
    ('test',    {'desc': 'test', 'redirection': 'idcnet', 'pcl': {'ip': '9.140.186.69',  'port': 12345}, 'redis': {'ip': '9.140.186.69',    'port': REDIS_PORT,  'passwd': REDIS_PASSWORD}, 'zk': {'hosts': '100.117.68.137:2181', 'root': '/ZK_LINE100_TEST'}}),
])



# auto insert name
for name, value in ENVS.items():
        value['name'] = name

WORLDS = {
    'WX' : 1,
    'QQ' : 2,
    'dev': 7,
}

def zoneid(world, zone):
    # world:3.zone:13.function:6.instance:10
    # world: max 7 (2 ** 3 - 1)
    #   1: 微信
    #   2: QQ
    #   7: 测试(包括开发环境和测试环境)
    # zone: max 8191 (2 ** 13 - 1)
    return (world << 13) + zone

ZONES = collections.OrderedDict([
    (zoneid(7, 101),      {'desc': 'dev',    'env':   ENVS['dev']}),
    (zoneid(7, 200),      {'desc': 'test',    'env':   ENVS['test']}),
 ])

AUTHS = {
    'apis': {
        # APPID -> APPKEY
        # APPKEY generated by: echo "$(date) + $appid"  | md5sum
        'test': '9cdaccb0f61a66ac70cfd5256cd8960b'
    },

    'basics': [
        # 测试组
        'wenchy',
    ],

    'admins': [
        # 运营组
        # 后台组
        'wenchy',
        # 前台组
    ],
}

# VENV_NAME = 'unknown' # default
VENV_NAME = 'dev' # default

# 部署环境配置: Virtual ENVironmentS
# 此命名原因: 一个venv映射多个env, 以利于弹性部署
# 部署目录: user00用户home目录下的`~/tornado`
VENVS = collections.OrderedDict([
    ("dev环境", collections.OrderedDict([
        ('dev', {'desc': '开发环境', 'path': 'dev', 'envs': ['dev', 'test'], 'port': 8001, 'auth': {'controller': 'basic', 'admin': 'admin'}, 'domain': 'http://xxx.com'}),
        ('lab', {'desc': '实验环境', 'path': 'lab', 'envs': ['dev', 'test'], 'port': 8002, 'auth': {'controller': 'basic', 'admin': 'admin'}, 'domain': 'http://xxx.com'}),
    ])),

    ("idc环境", collections.OrderedDict([
        ('idcnet', {'desc': 'IDC环境', 'path': 'idcnet', 'envs': ['test'], 'port': 9001, 'auth': {'controller': 'basic', 'admin': 'admin'}, 'domain': 'http://xxx.com'}),
        # ('line100_test', {'desc': LINE100+'测试', 'path': 'line100_test', 'envs': ['line100_test'], 'port': 8997, 'auth': {'controller': 'test', 'admin': 'admin'}, 'domain': 'http://xxx.com'}),
    ])),

    # ("其它环境", collections.OrderedDict([
    #     ('audit', {'desc': '审核环境', 'path': 'audit', 'envs': ['audit'], 'port': 8988, 'auth': {'controller': 'test', 'admin': 'admin'}, 'domain': 'http://xxx.com'}),
    # ])),
])

def help():
    for key, venvs in VENVS.items():
        print(key + ': ')
        for name, venv in venvs.items():
            print(name + ': ' + venv['desc'])

def get_venv(venv_name):
    for _, venvs in VENVS.items():
        for name, venv in venvs.items():
            if name == venv_name:
                return venv

def filter_zones(deployed_env):
    if deployed_env:
        zones = collections.OrderedDict()
        for zone_id, item in ZONES.items():
            if item['env']['name'] in deployed_env['envs']:
                zones[zone_id] = item
        return zones

DEPLOYED_ENV = get_venv(VENV_NAME)
DEPLOYED_ZONES = filter_zones(DEPLOYED_ENV)


def is_devnet():
    if VENV_NAME in ['lab', 'dev']:
        return True
    return False
